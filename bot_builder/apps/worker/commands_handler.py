from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
from apps.bot.models import Bot_Message, Bot_Button, BotUser, Text_Castom, UserTraining
from apps.worker.models import Events
import requests
from datetime import datetime
import pandas as pd
import time
from threading import Thread
from datetime import timedelta
import openai
from config import API_CHAT_GPT_KEY
from open_ai import interact_with_assistant
from apps.worker.payment import create_payment
import asyncio
import re
from apps.notification.models import Motivational_Messages
from translate import translate



# from deep_translator import GoogleTranslator

# def translate_message(text: str, target_lang: str = 'en') -> str:
#     try:
#         translated = GoogleTranslator(source='auto', target=target_lang).translate(text)
#         return translated
#     except Exception as e:
#         print(f"Translation error: {e}")
#         return text



class Bot_Handler():
    def __init__(self) -> None:
        self.val = {}  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö


    def format_message_text(self, text):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ–¥—Å—Ç–∞–≤–ª—è—è –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ val"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ text —Å—Ç—Ä–æ–∫–æ–π
            if not isinstance(text, str):
                return str(text)
            return text.format(val=type('DynamicValue', (), self.val))
        except KeyError as e:
            print(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è {e} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return text
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return text




    def base(self, bot, state, user, callback_data, callback_id, message, event):
        if callback_id:
            bot.answer_callback_query(callback_query_id=callback_id)
        self.val = {}  # –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ –≤—ã–∑–æ–≤–∞
        print(f'''
            user - {user}
            call_data - {callback_data}
            call_id - {callback_id}
            message - {message}''')

        user.state = state.current_state
        user.save()

        # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.val['user_name'] = user.name if hasattr(user, 'name') else '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
        self.val['user_id'] = user.tg_id
        self.val['text'] = '–ë–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        text = self.format_message_text(state.text)

        buttons = Bot_Button.objects.filter(message_trigger=state)
        keyboard = InlineKeyboardMarkup()
        for button in buttons:
            keyboard.add(InlineKeyboardButton(text=translate(button.text, user.language_chooce), callback_data=f"{button.data} {button.text}"))

        bot.send_message(user.tg_id, translate(text, user.language_chooce), reply_markup=keyboard, parse_mode='HTML')




    def start(self, bot, state, user, callback_data, callback_id, message, event):
        if callback_id:
            bot.answer_callback_query(callback_query_id=callback_id)
        self.val = {}  # –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        print(f'''------------- START 
            user - {user}
            call_data - {callback_data}
            call_id - {callback_id}
            message - {message}''')

        user.state = state.current_state
        user.save()

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
        self.val['user_name'] = user.first_name if user.first_name is not None else user.username
        self.val['text'] = '–¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å'
        self.val['bot_name'] = 'Bot Builder'
        
        if user.language_chooce == None:
            keyboards_language = InlineKeyboardMarkup()
            keyboards_language.row(
                InlineKeyboardButton(text="üá∑üá∫ Russia", callback_data='select_language ru'),
                InlineKeyboardButton(text="üá∫üá∏ English", callback_data='select_language en'),
            )
            sent_message = bot.send_message(user.tg_id, '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –±–æ—Ç–∞ / Select the language of the bot', reply_markup=keyboards_language, parse_mode='HTML')

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –º–æ–¥–µ–ª—å –∏–ª–∏ –≤ state
            user.last_message_id = sent_message.message_id
            user.save()
        else:
            try:
                start_message = Bot_Message.objects.get(current_state='start')
                text = self.format_message_text(start_message.text)
            except Bot_Message.DoesNotExist:
                text = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è def start()"
                print(text)

            buttons = Bot_Button.objects.filter(message_trigger=start_message)
            keyboard = ReplyKeyboardMarkup(resize_keyboard=True)

            if len(buttons) >= 2:
                keyboard.row(
                    KeyboardButton(text=translate(buttons[0].text, user.language_chooce)),
                    KeyboardButton(text=translate(buttons[1].text, user.language_chooce)),
                )
            if len(buttons) > 2:
                keyboard.add(
                    KeyboardButton(text=translate(buttons[2].text, user.language_chooce))
                )

            try:
                if user.last_message_id:
                    bot.delete_message(chat_id=user.tg_id, message_id=user.last_message_id)
            except Exception as e:
                print(f'–û—à–∏–±–∫–∞ {e}')

            sent_message = bot.send_message(user.tg_id, translate(text, user.language_chooce), reply_markup=keyboard, parse_mode='HTML')

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –º–æ–¥–µ–ª—å –∏–ª–∏ –≤ state
            user.last_message_id = sent_message.message_id
            user.save()


    def select_language(self, bot, state, user, callback_data, callback_id, message, event):
        if callback_id:
            bot.answer_callback_query(callback_query_id=callback_id)
        self.val = {}  # –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ –≤—ã–∑–æ–≤–∞
        print(f'''
            user - {user}
            call_data - {callback_data}
            call_id - {callback_id}
            message - {message}''')

        language = callback_data.split(' ')[1]
        user.state = state.current_state
        user.language_chooce = language
        user.save()


        # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.val['user_name'] = user.name if hasattr(user, 'name') else '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
        self.val['user_id'] = user.tg_id
        self.val['text'] = '–ë–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        text = self.format_message_text(state.text)

        buttons = Bot_Button.objects.filter(message_trigger=state)
        keyboard = InlineKeyboardMarkup()
        for button in buttons:
            keyboard.add(InlineKeyboardButton(text=translate(button.text, user.language_chooce), callback_data=f"{button.data} {button.text}"))

        if user.last_message_id:
            bot.delete_message(chat_id=user.tg_id, message_id=user.last_message_id)

        # sent_message = bot.send_message(user.tg_id, translate(text, user.language_chooce), reply_markup=keyboard, parse_mode='HTML')
        sent_message = bot.send_message(user.tg_id, translate(text, user.language_chooce), reply_markup=keyboard, parse_mode='HTML')

        user.last_message_id = sent_message.message_id
        user.save()






    def profile(self, bot, state, user, callback_data, callback_id, message, event):
        if callback_id:
            bot.answer_callback_query(callback_query_id=callback_id)
        self.val = {}  # –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ –≤—ã–∑–æ–≤–∞
        print(f'''
            user - {user}
            call_data - {callback_data}
            call_id - {callback_id}
            message - {message}''')

        user.state = state.current_state
        user.save()

        # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.val['user_name'] = user.name if hasattr(user, 'name') else '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
        self.val['user_id'] = user.tg_id

        self.val['first_name'] = user.first_name
        self.val['massa'] = user.massa
        self.val['height'] = user.height
        self.val['age'] = user.age
        self.val['purpose'] = user.purpose if user.purpose != '–ü–µ—Ä–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è' else '–†–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è'
        self.val['subscription'] = f"–î–∞, –¥–æ {user.subscribe_data_end}" if user.subscription and user.subscribe_data_end else "–ù–µ—Ç"

        self.val['text'] = '–ë–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        text = self.format_message_text(state.text)

        buttons = Bot_Button.objects.filter(message_trigger=state).order_by('id')
        keyboard = InlineKeyboardMarkup()
        for button in buttons:
            keyboard.add(InlineKeyboardButton(text=translate(button.text, user.language_chooce), callback_data=f"{button.data} {button.text}"))

        # if user.last_message_id:
        #     bot.delete_message(chat_id=user.tg_id, message_id=user.last_message_id)

        sent_message = bot.send_message(user.tg_id, translate(text, user.language_chooce), reply_markup=keyboard, parse_mode='HTML')

        user.last_message_id = sent_message.message_id
        user.save()





    def add_traner_input(self, bot, state, user, callback_data, callback_id, message, event):
        if callback_id:
            bot.answer_callback_query(callback_query_id=callback_id)
        self.val = {}  # –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ –≤—ã–∑–æ–≤–∞
        print(f'''
            user - {user}
            call_data - {callback_data}
            call_id - {callback_id}
            message - {message}''')

        user.state = state.current_state
        user.save()

        # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.val['user_name'] = user.name if hasattr(user, 'name') else '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
        self.val['user_id'] = user.tg_id
        self.val['text'] = '–ë–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        text = self.format_message_text(state.text)

        buttons = Bot_Button.objects.filter(message_trigger=state)
        keyboard = InlineKeyboardMarkup()
        for button in buttons:
            keyboard.add(InlineKeyboardButton(text=translate(button.text, user.language_chooce), callback_data=f"{button.data} {button.text}"))

        if user.last_message_id:
            bot.delete_message(chat_id=user.tg_id, message_id=user.last_message_id)

        send = bot.send_message(user.tg_id, translate(text, user.language_chooce), reply_markup=keyboard, parse_mode='HTML')
        user.last_message_id = send.message_id
        user.save()




    def training_date_inpt(self, bot, state, user, callback_data, callback_id, message, event):
        if callback_id:
            bot.answer_callback_query(callback_query_id=callback_id)
        self.val = {}  # –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ –≤—ã–∑–æ–≤–∞
        print(f'''
            user - {user}
            call_data - {callback_data}
            call_id - {callback_id}
            message - {message}''')

        user.state = state.current_state
        user.save()

        traning_name = message['text']
        traning = UserTraining.objects.create(user=user, name_traning=traning_name)


        # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.val['user_name'] = user.name if hasattr(user, 'name') else '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
        self.val['user_id'] = user.tg_id
        self.val['text'] = '–ë–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        text = self.format_message_text(state.text)

        buttons = Bot_Button.objects.filter(message_trigger=state)
        keyboard = InlineKeyboardMarkup()
        for button in buttons:
            keyboard.add(InlineKeyboardButton(text=translate(button.text, user.language_chooce), callback_data=f"{button.data} {traning.id}"))

        if user.last_message_id:
            bot.delete_message(chat_id=user.tg_id, message_id=user.last_message_id)

        sent_message = bot.send_message(user.tg_id, translate(text, user.language_chooce), reply_markup=keyboard, parse_mode='HTML')

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –º–æ–¥–µ–ª—å –∏–ª–∏ –≤ state
        user.last_message_id = sent_message.message_id
        user.save()



    def e_validate_date(self, bot, state, user, callback_data, callback_id, message, event):
        if callback_id:
            bot.answer_callback_query(callback_query_id=callback_id)
        self.val = {}  # –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ –≤—ã–∑–æ–≤–∞
        print(f'''
            user - {user}
            call_data - {callback_data}
            call_id - {callback_id}
            message - {message}''')

        user.state = state.current_state
        user.save()

        # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.val['user_name'] = user.name if hasattr(user, 'name') else '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
        self.val['user_id'] = user.tg_id
        self.val['text'] = '–ë–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        text = self.format_message_text(state.text)

        buttons = Bot_Button.objects.filter(message_trigger=state)
        keyboard = InlineKeyboardMarkup()
        for button in buttons:
            keyboard.add(InlineKeyboardButton(text=translate(button.text, user.language_chooce), callback_data=f"{button.data} {button.text}"))

        bot.send_message(user.tg_id, translate(text, user.language_chooce), reply_markup=keyboard, parse_mode='HTML')




    def create_traning(self, bot, state, user, callback_data, callback_id, message, event):
        if callback_id:
            bot.answer_callback_query(callback_query_id=callback_id)
        self.val = {}  # –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ –≤—ã–∑–æ–≤–∞
        print(f'''
            user - {user}
            call_data - {callback_data}
            call_id - {callback_id}
            message - {message}''')

        user.state = state.current_state
        user.save()

        def validate_date_format(date_text, user):
            try:
                # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É –≤ –æ–∂–∏–¥–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
                training_date = datetime.strptime(date_text, '%d-%m-%Y %H:%M')
                return training_date
            except ValueError:
                bot.send_message(
                    user.tg_id,translate("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã\n‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç <b>–î–î-–ú–ú-–ì–ì–ì–ì –ß–ß:–ú–ú</b>", user.language_chooce), parse_mode='HTML')
                user.state = 'e_validate_date'
                user.save()
                return False

        # –ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏
        try:
            training_date = validate_date_format(message['text'], user)
            if training_date:  # –ï—Å–ª–∏ –¥–∞—Ç–∞ –≤–∞–ª–∏–¥–Ω–∞—è
                training = UserTraining.objects.filter(user=user).order_by('-id').first()
                if training:
                    print('training', training)
                    training.training_data = training_date
                    training.save()

                    self.val['user_name'] = user.name if hasattr(user, 'name') else '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
                    self.val['time'] = training_date
                    self.val['text'] = '–ë–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
                    text = self.format_message_text(state.text)

                    buttons = Bot_Button.objects.filter(message_trigger=state).order_by('id')
                    keyboard = InlineKeyboardMarkup()
                    for button in buttons:
                        keyboard.add(InlineKeyboardButton(text=translate(button.text, user.language_chooce), callback_data=f"{button.data} {button.text}"))

                    sent_message = bot.send_message(user.tg_id, translate(text, user.language_chooce), reply_markup=keyboard, parse_mode='HTML')

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –º–æ–¥–µ–ª—å –∏–ª–∏ –≤ state
                    user.last_message_id = sent_message.message_id
                    user.save()

                else:
                    bot.send_message(
                        user.tg_id,
                        translate("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", user.language_chooce)
                    )
                        # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        except Exception as e:
            bot.send_message(user.tg_id, translate(f"–û—à–∏–±–∫–∞: {e}", user.language_chooce))







    def my_traners(self, bot, state, user, callback_data, callback_id, message, event):
        if callback_id:
            bot.answer_callback_query(callback_query_id=callback_id)
        self.val = {}  # –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ –≤—ã–∑–æ–≤–∞
        print(f'''
            user - {user}
            call_data - {callback_data}
            call_id - {callback_id}
            message - {message}''')

        user.state = state.current_state
        user.save()

        tranings = UserTraining.objects.filter(user=user)
        tranings_dict = ""  # –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ —Å—Ç—Ä–æ–∫–∞
        for num, traning in enumerate(tranings, start=1):
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            formatted_date = (traning.training_data + timedelta(hours=3)).strftime('%Y-%m-%d %H:%M')
            tranings_dict += f'{num}. {traning.name_traning} - {formatted_date}\n\n'
            
        # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.val['user_name'] = user.name if hasattr(user, 'name') else '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
        self.val['user_id'] = user.tg_id
        self.val['text'] = tranings_dict

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        text = self.format_message_text(state.text)

        buttons = Bot_Button.objects.filter(message_trigger=state)
        keyboard = InlineKeyboardMarkup()
        for button in buttons:
            keyboard.add(InlineKeyboardButton(text=translate(button.text, user.language_chooce), callback_data=f"{button.data} {button.text}"))

        if user.last_message_id:
            bot.delete_message(chat_id=user.tg_id, message_id=user.last_message_id)

        sent_message = bot.send_message(user.tg_id, translate(text, user.language_chooce), reply_markup=keyboard, parse_mode='HTML')

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –º–æ–¥–µ–ª—å –∏–ª–∏ –≤ state
        user.last_message_id = sent_message.message_id
        user.save()



    def change_trainer(self, bot, state, user, callback_data, callback_id, message, event):
        if callback_id:
            bot.answer_callback_query(callback_query_id=callback_id)
        self.val = {}  # –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ –≤—ã–∑–æ–≤–∞
        print(f'''
            user - {user}
            call_data - {callback_data}
            call_id - {callback_id}
            message - {message}''')

        user.state = state.current_state
        user.save()

        # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.val['user_name'] = user.name if hasattr(user, 'name') else '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
        self.val['user_id'] = user.tg_id
        self.val['text'] = '–ë–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        text = self.format_message_text(state.text)

        keyboard = InlineKeyboardMarkup()

        tranings = UserTraining.objects.filter(user=user)
        for num, traning in enumerate(tranings, start=1):
            traning_text = f"{num}. {traning.name_traning} - {traning.training_data}"
            keyboard.add(InlineKeyboardButton(text=translate(traning_text, user.language_chooce), callback_data=f"traning_change {traning.id}"))
        # buttons = Bot_Button.objects.filter(message_trigger=state)
        # for button in buttons:
        #     keyboard.add(InlineKeyboardButton(text=translate(button.text, user.language_chooce), callback_data=f"{button.data} {button.text}"))

        # sent_message = bot.send_message(user.tg_id, translate(text, user.language_chooce), reply_markup=keyboard, parse_mode='HTML')
        
        if user.last_message_id:
            bot.delete_message(chat_id=user.tg_id, message_id=user.last_message_id)

        sent_message = bot.send_message(user.tg_id, translate(text, user.language_chooce), reply_markup=keyboard, parse_mode='HTML')
        user.last_message_id = sent_message.message_id
        user.save()



    def traning_change(self, bot, state, user, callback_data, callback_id, message, event):
        if callback_id:
            bot.answer_callback_query(callback_query_id=callback_id)
        self.val = {}  # –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ –≤—ã–∑–æ–≤–∞
        print(f'''
            user - {user}
            call_data - {callback_data}
            call_id - {callback_id}
            message - {message}''')

        user.state = state.current_state
        user.save()

        traning_id = callback_data.split(' ')[1]

        # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.val['user_name'] = user.name if hasattr(user, 'name') else '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
        self.val['user_id'] = user.tg_id
        self.val['text'] = '–ë–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        text = self.format_message_text(state.text)

        keyboard = InlineKeyboardMarkup()

        traning_text_1 = f"–ù–∞–∑–≤–∞–Ω–∏–µ" if user.language_chooce == 'ru' else f"Name"
        traning_text_2 = f"–î–∞—Ç–∞"
        traning_text_3 = f"–£–¥–∞–ª–∏—Ç—å"
        keyboard.row(
            InlineKeyboardButton(text="–ù–∞–∑–≤–∞–Ω–∏–µ" if user.language_chooce == 'ru' else translate(traning_text_1, user.language_chooce), callback_data=f"traning_chng_name {traning_id}"),
            InlineKeyboardButton(text=translate(traning_text_2, user.language_chooce), callback_data=f"traning_chng_date {traning_id}"),
            InlineKeyboardButton(text=translate(traning_text_3, user.language_chooce), callback_data=f"traning_delete {traning_id}"),
        )
        # buttons = Bot_Button.objects.filter(message_trigger=state)
        # for button in buttons:
        #     keyboard.add(InlineKeyboardButton(text=translate(button.text, user.language_chooce), callback_data=f"{button.data} {button.text}"))
        if user.last_message_id:
            bot.delete_message(chat_id=user.tg_id, message_id=user.last_message_id)


        sent_message = bot.send_message(user.tg_id, translate(text, user.language_chooce), reply_markup=keyboard, parse_mode='HTML')
        user.last_message_id = sent_message.message_id
        user.save()



    def traning_delete(self, bot, state, user, callback_data, callback_id, message, event):
        if callback_id:
            bot.answer_callback_query(callback_query_id=callback_id)
        self.val = {}  # –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ –≤—ã–∑–æ–≤–∞
        print(f'''
            user - {user}
            call_data - {callback_data}
            call_id - {callback_id}
            message - {message}''')

        user.state = state.current_state
        user.save()

        traning_id = callback_data.split(' ')[1]
        obj = UserTraining.objects.get(id=traning_id)
        obj_text = obj.name_traning

        # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.val['user_name'] = user.name if hasattr(user, 'name') else '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
        self.val['user_id'] = user.tg_id
        self.val['text'] = obj_text  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        text = self.format_message_text(state.text)

        buttons = Bot_Button.objects.filter(message_trigger=state)
        keyboard = InlineKeyboardMarkup()
        for button in buttons:
            keyboard.add(InlineKeyboardButton(text=translate(button.text, user.language_chooce), callback_data=f"{button.data} {traning_id}"))

        if user.last_message_id:
            bot.delete_message(chat_id=user.tg_id, message_id=user.last_message_id)
        bot.send_message(user.tg_id, translate(text, user.language_chooce), reply_markup=keyboard, parse_mode='HTML')
        obj.delete()




    def traning_chng_name(self, bot, state, user, callback_data, callback_id, message, event):
        if callback_id:
            bot.answer_callback_query(callback_query_id=callback_id)
        self.val = {}  # –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ –≤—ã–∑–æ–≤–∞
        print(f'''
            user - {user}
            call_data - {callback_data}
            call_id - {callback_id}
            message - {message}''')

        traning_id = callback_data.split(' ')[1]
        user.temporary_training_id = traning_id

        user.state = state.current_state
        user.save()

        # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.val['user_name'] = user.name if hasattr(user, 'name') else '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
        self.val['user_id'] = user.tg_id
        self.val['text'] = traning_id  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        text = self.format_message_text(state.text)

        buttons = Bot_Button.objects.filter(message_trigger=state)
        keyboard = InlineKeyboardMarkup()
        for button in buttons:
            keyboard.add(InlineKeyboardButton(text=translate(button.text, user.language_chooce), callback_data=f"{button.data} {traning_id}"))

        if user.last_message_id:
            bot.delete_message(chat_id=user.tg_id, message_id=user.last_message_id)

        bot.send_message(user.tg_id, translate(text, user.language_chooce), reply_markup=keyboard, parse_mode='HTML')



    def traning_save_name(self, bot, state, user, callback_data, callback_id, message, event):
        if callback_id:
            bot.answer_callback_query(callback_query_id=callback_id)
        self.val = {}  # –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ –≤—ã–∑–æ–≤–∞
        print(f'''
            user - {user}
            call_data - {callback_data}
            call_id - {callback_id}
            message - {message}''')

        user.state = state.current_state
        user.save()

        traning_id = user.temporary_training_id
        traning = UserTraining.objects.get(id=traning_id)
        traning.name_traning = message['text']
        traning.save()

        user.temporary_training_id = None
        user.save()

        # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.val['user_name'] = user.name if hasattr(user, 'name') else '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
        self.val['user_id'] = user.tg_id
        self.val['text'] = '–ë–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        text = self.format_message_text(state.text)

        buttons = Bot_Button.objects.filter(message_trigger=state)
        keyboard = InlineKeyboardMarkup()
        for button in buttons:
            keyboard.add(InlineKeyboardButton(text=translate(button.text, user.language_chooce), callback_data=f"{button.data} {button.text}"))

        send = bot.send_message(user.tg_id, translate(text, user.language_chooce), reply_markup=keyboard, parse_mode='HTML')
        user.last_message_id = send.message_id
        user.save()







    def traning_chng_date(self, bot, state, user, callback_data, callback_id, message, event):
        if callback_id:
            bot.answer_callback_query(callback_query_id=callback_id)
        self.val = {}  # –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ –≤—ã–∑–æ–≤–∞
        print(f'''
            user - {user}
            call_data - {callback_data}
            call_id - {callback_id}
            message - {message}''')

        traning_id = callback_data.split(' ')[1]
        user.temporary_training_id = traning_id

        user.state = state.current_state
        user.save()



        # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.val['user_name'] = user.name if hasattr(user, 'name') else '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
        self.val['user_id'] = user.tg_id
        self.val['text'] = '–ë–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        text = self.format_message_text(state.text)

        buttons = Bot_Button.objects.filter(message_trigger=state)
        keyboard = InlineKeyboardMarkup()
        for button in buttons:
            keyboard.add(InlineKeyboardButton(text=translate(button.text, user.language_chooce), callback_data=f"{button.data} {traning_id}"))

        if user.last_message_id:
            bot.delete_message(chat_id=user.tg_id, message_id=user.last_message_id)
            
        bot.send_message(user.tg_id, translate(text, user.language_chooce), reply_markup=keyboard, parse_mode='HTML')



    def traning_save_date(self, bot, state, user, callback_data, callback_id, message, event):
        if callback_id:
            bot.answer_callback_query(callback_query_id=callback_id)
        self.val = {}  # –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ –≤—ã–∑–æ–≤–∞
        print(f'''
            user - {user}
            call_data - {callback_data}
            call_id - {callback_id}
            message - {message}''')

        user.state = state.current_state
        user.save()

        def validate_date_format(date_text, user):
            try:
                training_date = datetime.strptime(date_text, '%d-%m-%Y %H:%M')
                return training_date
            except ValueError:
                bot.send_message(
                    user.tg_id,translate("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã\n‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç <b>–î–î-–ú–ú-–ì–ì–ì–ì –ß–ß:–ú–ú</b>", user.language_chooce), parse_mode='HTML')
                user.state = 'e_date_save_date'
                user.save()
                return False

        # –ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏
        try:
            training_date = validate_date_format(message['text'], user)
            if training_date:  # –ï—Å–ª–∏ –¥–∞—Ç–∞ –≤–∞–ª–∏–¥–Ω–∞—è
                traning_id = user.temporary_training_id
                training = UserTraining.objects.get(id=traning_id)
                if training:
                    training.training_data = training_date
                    training.save()

                    user.temporary_training_id = None
                    user.save()

                    self.val['user_name'] = user.name if hasattr(user, 'name') else '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
                    self.val['time'] = training_date
                    self.val['text'] = '–ë–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
                    text = self.format_message_text(state.text)

                    buttons = Bot_Button.objects.filter(message_trigger=state).order_by('id')
                    keyboard = InlineKeyboardMarkup()
                    for button in buttons:
                        keyboard.add(InlineKeyboardButton(text=translate(button.text, user.language_chooce), callback_data=f"{button.data} {button.text}"))

                    sent_message = bot.send_message(user.tg_id, translate(text, user.language_chooce), reply_markup=keyboard, parse_mode='HTML')

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –º–æ–¥–µ–ª—å –∏–ª–∏ –≤ state
                    user.last_message_id = sent_message.message_id
                    user.save()

                else:
                    user.temporary_training_id = None
                    user.save()
                    bot.send_message(
                        user.tg_id,
                        translate("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", user.language_chooce)
                    )
                        # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        except Exception as e:
            user.temporary_training_id = None
            user.save()
            bot.send_message(user.tg_id, translate(f"–û—à–∏–±–∫–∞: {e}", user.language_chooce))



    
    def menus(self, bot, state, user, callback_data, callback_id, message, event):
        if callback_id:
            bot.answer_callback_query(callback_query_id=callback_id)
        self.val = {}  # –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ –≤—ã–∑–æ–≤–∞
        print(f'''
            user - {user}
            call_data - {callback_data}
            call_id - {callback_id}
            message - {message}''')

        user.state = state.current_state
        user.save()

        # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.val['user_name'] = user.name if hasattr(user, 'name') else '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
        self.val['user_id'] = user.tg_id
        self.val['subscription'] = user.subscription
        self.val['text'] = '–ë–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        keyboard = InlineKeyboardMarkup()

        if user.subscription is not True:
            description = f"{user.tg_id}"

            payment_url = create_payment(description)

            text_castom = Text_Castom.objects.get(condition="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –æ–ø–ª–∞—á–µ–Ω–∞")
            text = text_castom.text
            keyboard.add(InlineKeyboardButton(text=translate("–û–ø–ª–∞—Ç–∏—Ç—å", user.language_chooce), url=payment_url))




        
        elif user.subscription == True and (user.menu == '' or user.menu == ' ' or user.menu == None):
            text_castoms = Text_Castom.objects.get(condition="–ë–µ–∑ –º–µ–Ω—é")
            text = text_castoms.text
            keyboard.add(InlineKeyboardButton(text=translate("–°–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –º–µ–Ω—é", user.language_chooce), callback_data=f"next"))

        elif user.subscription == True and (user.menu != '' or user.menu != ' ' or user.menu != None):
            text = user.menu
            keyboard.add(InlineKeyboardButton(text=translate("–°–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –º–µ–Ω—é", user.language_chooce), callback_data=f"next"))

        buttons = Bot_Button.objects.filter(message_trigger=state)
        for button in buttons:
            keyboard.add(InlineKeyboardButton(text=translate(button.text, user.language_chooce), callback_data=f"{button.data} {button.text}"))

        if user.last_message_id:
            bot.delete_message(chat_id=user.tg_id, message_id=user.last_message_id)

        sent_message = bot.send_message(user.tg_id, translate(text, user.language_chooce), reply_markup=keyboard, parse_mode='Markdown')

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –º–æ–¥–µ–ª—å –∏–ª–∏ –≤ state
        user.last_message_id = sent_message.message_id
        user.save()



    def trainer_ai_input(self, bot, state, user, callback_data, callback_id, message, event):
        if callback_id:
            bot.answer_callback_query(callback_query_id=callback_id)
        self.val = {}  # –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ –≤—ã–∑–æ–≤–∞
        print(f'''
            user - {user}
            call_data - {callback_data}
            call_id - {callback_id}
            message - {message}''')

        user.state = state.current_state
        user.save()

        # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.val['user_name'] = user.name if hasattr(user, 'name') else '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
        self.val['user_id'] = user.tg_id
        self.val['text'] = '–ë–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        text = self.format_message_text(state.text)


        if user.subscription is not True:
            description = f"{user.tg_id}"

            payment_url = create_payment(description)
            keyboards = InlineKeyboardMarkup()
            text_castom = Text_Castom.objects.get(condition="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –æ–ø–ª–∞—á–µ–Ω–∞")
            text = text_castom.text
            keyboards.add(InlineKeyboardButton(text=translate("–û–ø–ª–∞—Ç–∏—Ç—å", user.language_chooce), url=payment_url))
            keyboards.add(InlineKeyboardButton(text=translate("–ù–∞–∑–∞–¥", user.language_chooce), callback_data='start'))
            # if user.last_message_id:
            #     # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, —É—Å—Ç–∞–Ω–æ–≤–∏–≤ reply_markup=None
            #     bot.edit_message_reply_markup(chat_id=user.tg_id, 
            #                                 message_id=user.last_message_id, 
            #                                 reply_markup=None)

            sent_message = bot.send_message(user.tg_id, translate(text, user.language_chooce), reply_markup=keyboards, parse_mode='HTML')

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –º–æ–¥–µ–ª—å –∏–ª–∏ –≤ state
            user.last_message_id = sent_message.message_id
            user.save()


        else:
            buttons = Bot_Button.objects.filter(message_trigger=state)
            keyboard = InlineKeyboardMarkup()
            for button in buttons:
                keyboard.add(InlineKeyboardButton(text=translate(button.text, user.language_chooce), callback_data=f"{button.data} {button.text}"))


            # if user.last_message_id:
            #     # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, —É—Å—Ç–∞–Ω–æ–≤–∏–≤ reply_markup=None
            #     bot.edit_message_reply_markup(chat_id=user.tg_id, 
            #                                 message_id=user.last_message_id, 
            #                                 reply_markup=None)

            sent_message = bot.send_message(user.tg_id, translate(text, user.language_chooce), reply_markup=keyboard, parse_mode='HTML')

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –º–æ–¥–µ–ª—å –∏–ª–∏ –≤ state
            user.last_message_id = sent_message.message_id
            user.save()



    def trainer_ai_send(self, bot, state, user, callback_data, callback_id, message, event):
        if callback_id:
            bot.answer_callback_query(callback_query_id=callback_id)
        self.val = {}  # –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ –≤—ã–∑–æ–≤–∞
        print(f'''
            user - {user}
            call_data - {callback_data}
            call_id - {callback_id}
            message - {message}''')

        user.state = state.current_state
        user.council = message['text']
        user.save()

        # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.val['user_name'] = user.name if hasattr(user, 'name') else '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
        self.val['user_id'] = user.tg_id
        self.val['text'] = '–ë–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        text = self.format_message_text(state.text)


        def clean_response(response):
            if not isinstance(response, str):
                return response
            
            # –£–¥–∞–ª—è–µ–º markdown-–∑–∞–≥–æ–ª–æ–≤–∫–∏ (# ...)
            response = re.sub(r'^#+\s*', '', response, flags=re.MULTILINE)
            
            # –£–¥–∞–ª—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ ChatGPT –≤–∏–¥–∞: „Äê4:0‚Ä†source„Äë
            response = re.sub(r'„Äê\d+:\d+‚Ä†[^„Äë]*„Äë', '', response)
            
            # –£–¥–∞–ª—è–µ–º –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã ‚Ä†, „Äê, „Äë
            special_chars_pattern = r'[‚Ä†„Äê„Äë]'
            response = re.sub(special_chars_pattern, '', response)
            
            # –ë–æ–ª—å—à–µ –ø—Ä–æ–±–µ–ª—ã –Ω–µ —Å–∂–∏–º–∞–µ–º –∏ –Ω–µ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º
            
            return response

        buttons = Bot_Button.objects.filter(message_trigger=state)
        keyboard = InlineKeyboardMarkup()
        for button in buttons:
            keyboard.add(InlineKeyboardButton(text=translate(button.text, user.language_chooce), callback_data=f"{button.data} {button.text}"))

        if user.last_message_id:
            bot.delete_message(chat_id=user.tg_id, message_id=user.last_message_id)

        sent_message = bot.send_message(user.tg_id, translate(text, user.language_chooce), reply_markup=keyboard, parse_mode='HTML')

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –º–æ–¥–µ–ª—å –∏–ª–∏ –≤ state
        user.last_message_id = sent_message.message_id
        user.save()


        #–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –≥–±—Ç
        text_custom = Text_Castom.objects.get(condition="–í–æ–ø—Ä–æ—Å –ò–ò-—Ç—Ä–µ–Ω–µ—Ä—É")
        user_message = f"{text_custom.text}. –í–ø–æ—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.council}. –ú–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.menu}"
        response = interact_with_assistant(user_message)
        response_clean = clean_response(response)

        keyboards = InlineKeyboardMarkup()
        keyboards.add(InlineKeyboardButton(text=translate("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", user.language_chooce), callback_data='start'))
        sent_message = bot.send_message(user.tg_id, translate(response_clean, user.language_chooce), parse_mode='Markdown', reply_markup=keyboards)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –º–æ–¥–µ–ª—å –∏–ª–∏ –≤ state
        user.last_message_id = sent_message.message_id
        user.save()



    def next(self, bot, state, user, callback_data, callback_id, message, event):
        if callback_id:
            bot.answer_callback_query(callback_query_id=callback_id)
        self.val = {}  # –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ –≤—ã–∑–æ–≤–∞
        print(f'''
            user - {user}
            call_data - {callback_data}
            call_id - {callback_id}
            message - {message}''')

        user.state = state.current_state
        user.save()

        # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.val['user_name'] = user.name if hasattr(user, 'name') else '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
        self.val['user_id'] = user.tg_id
        self.val['text'] = '–ë–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        text = self.format_message_text(state.text)

        buttons = Bot_Button.objects.filter(message_trigger=state)
        keyboard = InlineKeyboardMarkup()
        for button in buttons:
            keyboard.add(InlineKeyboardButton(text=translate(button.text, user.language_chooce), callback_data=button.data))


        # if user.last_message_id:
        #     # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, —É—Å—Ç–∞–Ω–æ–≤–∏–≤ reply_markup=None
        #     bot.edit_message_reply_markup(chat_id=user.tg_id, 
        #                                 message_id=user.last_message_id, 
        #                                 reply_markup=None)
        if user.last_message_id:
            bot.delete_message(chat_id=user.tg_id, message_id=user.last_message_id)

        sent_message = bot.send_message(user.tg_id, translate(text, user.language_chooce), reply_markup=keyboard, parse_mode='HTML')

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –º–æ–¥–µ–ª—å –∏–ª–∏ –≤ state
        user.last_message_id = sent_message.message_id
        user.save()




    #–§–∏–∫—Å–∏—Ä—É–µ–º –≤–≤–µ–¥–µ–Ω–æ–µ –∏–º—è
    def user_first_name(self, bot, state, user, callback_data, callback_id, message, event):
        if callback_id:
            bot.answer_callback_query(callback_query_id=callback_id)
        self.val = {}  # –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ –≤—ã–∑–æ–≤–∞
        print(f'''
            user - {user}
            call_data - {callback_data}
            call_id - {callback_id}
            message - {message}''')

        user.first_name = message['text']
        user.last_input_message_id = message['message_id']
        user.state = state.current_state
        user.save()

        if user.last_input_message_id:
            bot.delete_message(chat_id=user.tg_id, message_id=user.last_input_message_id)


        # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.val['user_name'] = user.name if hasattr(user, 'name') else '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
        self.val['user_id'] = user.tg_id
        self.val['text'] = '–ë–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        text = self.format_message_text(state.text)

        buttons = Bot_Button.objects.filter(message_trigger=state)
        keyboard = InlineKeyboardMarkup()

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
        keyboard.row(
            *[InlineKeyboardButton(text=translate(button.text, user.language_chooce), callback_data=f'{button.data} {button.text}') for button in buttons]
        )
        
        if user.last_message_id:
            bot.delete_message(chat_id=user.tg_id, message_id=user.last_message_id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        sent_message = bot.send_message(user.tg_id, translate(text, user.language_chooce), reply_markup=keyboard, parse_mode='HTML')

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –º–æ–¥–µ–ª—å –∏–ª–∏ –≤ state
        user.last_message_id = sent_message.message_id
        user.save()



    
    def user_gender(self, bot, state, user, callback_data, callback_id, message, event):
        if callback_id:
            bot.answer_callback_query(callback_query_id=callback_id)
        self.val = {}  # –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ –≤—ã–∑–æ–≤–∞
        print(f'''
            user - {user}
            call_data - {callback_data}
            call_id - {callback_id}
            message - {message}''')

        
        user.state = state.current_state
        user.save()

        # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.val['user_name'] = user.name if hasattr(user, 'name') else '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
        self.val['user_id'] = user.tg_id
        self.val['text'] = '–ë–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        text = self.format_message_text(state.text)

        buttons = Bot_Button.objects.filter(message_trigger=state)
        keyboard = InlineKeyboardMarkup()
        for button in buttons:
            keyboard.add(InlineKeyboardButton(text=translate(button.text, user.language_chooce), callback_data=f'{button.data} {button.text}'))

        if user.last_message_id:
            bot.delete_message(chat_id=user.tg_id, message_id=user.last_message_id)

        sent_message = bot.send_message(user.tg_id, translate(text, user.language_chooce), reply_markup=keyboard, parse_mode='HTML')

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –º–æ–¥–µ–ª—å –∏–ª–∏ –≤ state
        user.last_message_id = sent_message.message_id
        user.save()



    
    def user_gender_change(self, bot, state, user, callback_data, callback_id, message, event):
        if callback_id:
            bot.answer_callback_query(callback_query_id=callback_id)
        self.val = {}  # –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ –≤—ã–∑–æ–≤–∞
        print(f'''
            user - {user}
            call_data - {callback_data}
            call_id - {callback_id}
            message - {message}''')

        user.gender = callback_data.split(' ')[1]
        user.state = state.current_state
        user.save()

        # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.val['user_name'] = user.name if hasattr(user, 'name') else '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
        self.val['user_id'] = user.tg_id
        self.val['text'] = '–ë–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        text = self.format_message_text(state.text)

        buttons = Bot_Button.objects.filter(message_trigger=state)
        keyboard = InlineKeyboardMarkup()
        for button in buttons:
            keyboard.add(InlineKeyboardButton(text=translate(button.text, user.language_chooce), callback_data=button.data))

        if user.last_message_id:
            bot.delete_message(chat_id=user.tg_id, message_id=user.last_message_id)


        # if user.last_input_message_id:
        #     bot.delete_message(chat_id=user.tg_id, message_id=user.last_input_message_id)

        sent_message = bot.send_message(user.tg_id, translate(text, user.language_chooce), reply_markup=keyboard, parse_mode='HTML')

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –º–æ–¥–µ–ª—å –∏–ª–∏ –≤ state
        user.last_message_id = sent_message.message_id
        user.save()



    def user_age_input(self, bot, state, user, callback_data, callback_id, message, event):
        if callback_id:
            bot.answer_callback_query(callback_query_id=callback_id)
        self.val = {}  # –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ –≤—ã–∑–æ–≤–∞
        print(f'''
            user - {user}
            call_data - {callback_data}
            call_id - {callback_id}
            message - {message}''')

        user.age = message['text']
        user.last_input_message_id = message['message_id']
        user.state = state.current_state
        user.save()

        # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.val['user_name'] = user.name if hasattr(user, 'name') else '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
        self.val['user_id'] = user.tg_id
        self.val['text'] = '–ë–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        text = self.format_message_text(state.text)

        buttons = Bot_Button.objects.filter(message_trigger=state)
        keyboard = InlineKeyboardMarkup()
        for button in buttons:
            keyboard.add(InlineKeyboardButton(text=translate(button.text, user.language_chooce), callback_data=button.data))

        if user.last_message_id:
            bot.delete_message(chat_id=user.tg_id, message_id=user.last_message_id)

        if user.last_input_message_id:
            bot.delete_message(chat_id=user.tg_id, message_id=user.last_input_message_id)

        sent_message = bot.send_message(user.tg_id, translate(text, user.language_chooce), reply_markup=keyboard, parse_mode='HTML')

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –º–æ–¥–µ–ª—å –∏–ª–∏ –≤ state
        user.last_message_id = sent_message.message_id
        user.save()




    #–§–∏–∫—Å–∏—Ä—É–µ–º –≤–µ—Å
    def user_massa_input(self, bot, state, user, callback_data, callback_id, message, event):
        if callback_id:
            bot.answer_callback_query(callback_query_id=callback_id)
        self.val = {}  # –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ –≤—ã–∑–æ–≤–∞
        print(f'''
            user - {user}
            call_data - {callback_data}
            call_id - {callback_id}
            message - {message}''')

        user.state = state.current_state
        user.last_input_message_id = message['message_id']
        user.massa = message['text']
        user.save()

        # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.val['user_name'] = user.name if hasattr(user, 'name') else '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
        self.val['user_id'] = user.tg_id
        self.val['text'] = '–ë–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        text = self.format_message_text(state.text)

        buttons = Bot_Button.objects.filter(message_trigger=state)
        keyboard = InlineKeyboardMarkup()
        for button in buttons:
            keyboard.add(InlineKeyboardButton(text=translate(button.text, user.language_chooce), callback_data=f'{button.data} {button.text}'))

        if user.last_message_id:
            bot.delete_message(chat_id=user.tg_id, message_id=user.last_message_id)


        if user.last_input_message_id:
            bot.delete_message(chat_id=user.tg_id, message_id=user.last_input_message_id)


        sent_message = bot.send_message(user.tg_id, translate(text, user.language_chooce), reply_markup=keyboard, parse_mode='HTML')

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –º–æ–¥–µ–ª—å –∏–ª–∏ –≤ state
        user.last_message_id = sent_message.message_id
        user.save()

    

    def user_haight_input(self, bot, state, user, callback_data, callback_id, message, event):
        if callback_id:
            bot.answer_callback_query(callback_query_id=callback_id)
        try:
            self.val = {}  # –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ –≤—ã–∑–æ–≤–∞
            print(f'''
                user - {user}
                call_data - {callback_data}
                call_id - {callback_id}
                message - {message}''')

            user.state = state.current_state
            user.last_input_message_id = message['message_id']
            user.height = message['text']
            user.save()

            # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            self.val['user_name'] = user.name if hasattr(user, 'name') else '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
            self.val['user_id'] = user.tg_id
            self.val['text'] = '–ë–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
            text = self.format_message_text(state.text)

            buttons = Bot_Button.objects.filter(message_trigger=state)
            keyboard = InlineKeyboardMarkup()

            for button in buttons:
                if user.language_chooce == 'ru':
                    text_iscl=button.text
                else:
                    text_iscl=translate(button.text, user.language_chooce)

                keyboard.add(InlineKeyboardButton(text=text_iscl, callback_data=f'{button.data} {button.text}'))

            if user.last_message_id:
                bot.delete_message(chat_id=user.tg_id, message_id=user.last_message_id)

            if user.last_input_message_id:
                bot.delete_message(chat_id=user.tg_id, message_id=user.last_input_message_id)

            sent_message = bot.send_message(user.tg_id, translate(text, user.language_chooce), reply_markup=keyboard, parse_mode='HTML')

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –º–æ–¥–µ–ª—å –∏–ª–∏ –≤ state
            user.last_message_id = sent_message.message_id
            user.save()   
        except Exception as e:
            print('\n–û—à–∏–±–∫–∞ –ø—Ä–∏ user_haight_input', e)
            





    def user_purpose(self, bot, state, user, callback_data, callback_id, message, event):
        if callback_id:
            bot.answer_callback_query(callback_query_id=callback_id)
        self.val = {}  # –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ –≤—ã–∑–æ–≤–∞
        print(f'''
            user - {user}
            call_data - {callback_data}
            call_id - {callback_id}
            message - {message}''')

        user.purpose = callback_data.split(' ')[1]
        user.products = ' '
        user.state = state.current_state
        user.save()

        # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.val['user_name'] = user.name if hasattr(user, 'name') else '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
        self.val['user_id'] = user.tg_id
        self.val['text'] = '–ë–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        text = self.format_message_text(state.text)

        buttons = Bot_Button.objects.filter(message_trigger=state).order_by('id')
        keyboard = InlineKeyboardMarkup()
        for button in buttons:
            if button.text == "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å" or button.text == "Continue":
                if user.products is not None and user.products != ' ':
                    if user.language_chooce == 'ru':
                        text_iscl=button.text
                    else:
                        text_iscl=translate(button.text, user.language_chooce)

                    keyboard.add(InlineKeyboardButton(text=text_iscl, callback_data=f'{button.data} {button.text}'))

                else:
                    pass
            else:
                if user.language_chooce == 'ru':
                    text_iscl=f'‚ùå {button.text}'
                else:
                    text_iscl=f'‚ùå {translate(button.text, user.language_chooce)}'

                keyboard.add(InlineKeyboardButton(text=text_iscl, callback_data=f'{button.data} {button.text}'))


        if user.last_message_id:
            bot.delete_message(chat_id=user.tg_id, message_id=user.last_message_id)


            # if user.language_chooce == 'ru':
            #     text_iscl_mes=button.text
            # else:
            #     text_iscl_mes=translate(button.text, user.language_chooce)


        sent_message = bot.send_message(user.tg_id, translate(text, user.language_chooce), reply_markup=keyboard, parse_mode='HTML')

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –º–æ–¥–µ–ª—å –∏–ª–∏ –≤ state
        user.last_message_id = sent_message.message_id
        user.save()




    def choice_product(self, bot, state, user, callback_data, callback_id, message, event):
        if callback_id:
            bot.answer_callback_query(callback_query_id=callback_id)
        self.val = {}  # –û—á–∏—â–∞–µ–º –ª—é–±—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ

        print(f'''
            user - {user}
            call_data - {callback_data}
            call_id - {callback_id}
            message - {message}
        ''')

        button_text = callback_data.split(' ')[1]

        # –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º user.products –≤ —Å–ø–∏—Å–æ–∫ (–µ—Å–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ, –±—É–¥–µ—Ç –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫)
        selected_products = user.products.split() if user.products else []

        # –¢–æ–≥–≥–ª–∏–º –ø—Ä–æ–¥—É–∫—Ç (–¥–æ–±–∞–≤–ª—è–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç; —É–±–∏—Ä–∞–µ–º, –µ—Å–ª–∏ –µ—Å—Ç—å)
        if button_text in selected_products:
            selected_products.remove(button_text)
        else:
            selected_products.append(button_text)

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ –º–æ–¥–µ–ª—å (—Å—Ç—Ä–æ–∫–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª)
        user.products = ' '.join(selected_products)
        user.save()

        # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –ë–î –ø–æ current_state
        state_custom = Bot_Message.objects.get(current_state=user.state)

        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç—Ç–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            try:
                buttons = Bot_Button.objects.filter(message_trigger=state_custom).order_by('id')
            except Exception as e:
                print('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫–Ω–æ–ø–æ–∫:', e)
                return

            updated_buttons = []

            # –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –≤—Å–µ–º –∫–Ω–æ–ø–∫–∞–º –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç + callback_data
            for button in buttons:
                # –°—á–∏—Ç–∞–µ–º, —á—Ç–æ –≤ –±–∞–∑–µ button.text —Ö—Ä–∞–Ω–∏—Ç—Å—è ¬´—á–∏—Å—Ç–æ–µ¬ª –Ω–∞–∑–≤–∞–Ω–∏–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä "milk" –±–µ–∑ –∑–Ω–∞—á–∫–æ–≤
                # (–ï—Å–ª–∏ —É –≤–∞—Å –≤ –±–∞–∑–µ —É–∂–µ –µ—Å—Ç—å "milk‚úÖ", –ª—É—á—à–µ –∫–∞–∂–¥—ã–π —Ä–∞–∑ –æ—á–∏—â–∞—Ç—å button.text –æ—Ç "‚úÖ‚ùå" –ø–µ—Ä–µ–¥ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ–º)
                clean_text = button.text.strip('‚úÖ‚ùå')
                if clean_text == "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å" or clean_text == "Continue":
                    if user.products is not None and user.products != ' ' and user.products != '':
                        new_text = clean_text
                    else:
                        new_text = ""

                elif clean_text in selected_products:
                    new_text = "‚úÖ " + clean_text
                else:
                    new_text = "‚ùå " + clean_text

                # callback_data —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ç–∞–∫, —á—Ç–æ–±—ã –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –º—ã —Å–Ω–æ–≤–∞ –ø–æ–ª—É—á–∏–ª–∏ —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç
                new_callback_data = f"{button.data} {clean_text}"


                if user.language_chooce == 'ru':
                    new_text=new_text
                else:
                    new_text=translate(new_text, user.language_chooce)
               
                updated_buttons.append(
                    InlineKeyboardButton(
                        new_text,
                        callback_data=new_callback_data
                    )
                )

            # –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–∫–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –≤ —Å–≤–æ—ë–º —Ä—è–¥—É)
            keyboard = InlineKeyboardMarkup([[btn] for btn in updated_buttons])

            # # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
            if user.last_message_id:
                bot.edit_message_reply_markup(
                    chat_id=user.tg_id,  # ID —á–∞—Ç–∞
                    message_id=user.last_message_id,  # ID —Å–æ–æ–±—â–µ–Ω–∏—è, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                    reply_markup=keyboard  # –ù–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
                )

        except Exception as e:
            print('–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É:', e)


    def user_product(self, bot, state, user, callback_data, callback_id, message, event):
        if callback_id:
            bot.answer_callback_query(callback_query_id=callback_id)
        self.val = {}  # –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ –≤—ã–∑–æ–≤–∞
        print(f'''
            user - {user}
            call_data - {callback_data}
            call_id - {callback_id}
            message - {message}''')

        # user.products = callback_data.split(' ')[1]
        user.state = state.current_state
        user.save()

        # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.val['user_name'] = user.name if hasattr(user, 'name') else '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
        self.val['user_id'] = user.tg_id
        self.val['text'] = '–ë–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        text = self.format_message_text(state.text)

        buttons = Bot_Button.objects.filter(message_trigger=state)
        keyboard = InlineKeyboardMarkup()

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
        keyboard.row(
            *[InlineKeyboardButton(text=translate(button.text, user.language_chooce), callback_data=f'{button.data} {button.text}') for button in buttons]
        )


        if user.last_message_id:
            bot.delete_message(chat_id=user.tg_id, message_id=user.last_message_id)

        sent_message = bot.send_message(user.tg_id, translate(text, user.language_chooce), reply_markup=keyboard, parse_mode='HTML')

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –º–æ–¥–µ–ª—å –∏–ª–∏ –≤ state
        user.last_message_id = sent_message.message_id
        user.save()





    def user_allergies(self, bot, state, user, callback_data, callback_id, message, event):
        if callback_id:
            bot.answer_callback_query(callback_query_id=callback_id)
        self.val = {}  # –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ –≤—ã–∑–æ–≤–∞
        print(f'''
            user - {user}
            call_data - {callback_data}
            call_id - {callback_id}
            message - {message}''')
        if message['text']:
            user.last_input_message_id = message['message_id']
            user.allergies = message['text'] if message['text'] != "üö´ –ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –∞–ª–ª–µ—Ä–≥–∏–∏ –∏–ª–∏ –Ω–µ–ø–µ—Ä–µ–Ω–æ—Å–∏–º–æ—Å—Ç—å –∫–∞–∫–∏—Ö-–ª–∏–±–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤?" or "üö´ Do you have any allergies or intolerances to any foods?" else "–ê–ª–ª–µ—Ä–≥–∏–∏ –Ω–∏ –Ω–∞ —á—Ç–æ –Ω–µ—Ç"
            user.save()
            if user.last_input_message_id:
                bot.delete_message(chat_id=user.tg_id, message_id=user.last_input_message_id)

        user.state = state.current_state
        user.save()

        # if user.allergies == "–ê–ª–ª–µ—Ä–≥–∏–∏ –Ω–∏ –Ω–∞ —á—Ç–æ –Ω–µ—Ç":
        #     if user.last_input_message_id:
        #         # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, —É—Å—Ç–∞–Ω–æ–≤–∏–≤ reply_markup=None
        #         bot.delete_message(chat_id=user.tg_id, message_id=user.last_input_message_id)
        # else:

        # if user.last_input_message_id:
        #     bot.delete_message(chat_id=user.tg_id, message_id=user.last_input_message_id)


        

        # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.val['user_name'] = user.name if hasattr(user, 'name') else '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
        self.val['user_id'] = user.tg_id
        self.val['text'] = '–ë–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        text = self.format_message_text(state.text)

        buttons = Bot_Button.objects.filter(message_trigger=state)
        keyboard = InlineKeyboardMarkup()
        for button in buttons:
            keyboard.add(InlineKeyboardButton(text=translate(button.text, user.language_chooce), callback_data=f'{button.data} {button.text}'))


        sent_message = bot.send_message(user.tg_id, translate(text, user.language_chooce), reply_markup=keyboard, parse_mode='HTML')

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –º–æ–¥–µ–ª—å –∏–ª–∏ –≤ state
        user.last_message_id = sent_message.message_id
        user.save()




    def user_allergies_yes(self, bot, state, user, callback_data, callback_id, message, event):
        if callback_id:
            bot.answer_callback_query(callback_query_id=callback_id)
        self.val = {}  # –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ –≤—ã–∑–æ–≤–∞
        print(f'''
            user - {user}
            call_data - {callback_data}
            call_id - {callback_id}
            message - {message}''')

        user.state = state.current_state
        user.save()

        # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.val['user_name'] = user.name if hasattr(user, 'name') else '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
        self.val['user_id'] = user.tg_id
        self.val['text'] = '–ë–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        text = self.format_message_text(state.text)

        buttons = Bot_Button.objects.filter(message_trigger=state)
        keyboard = InlineKeyboardMarkup()
        for button in buttons:
            keyboard.add(InlineKeyboardButton(text=translate(button.text, user.language_chooce), callback_data=f'{button.data} {button.text}'))

        if user.last_message_id:
            bot.delete_message(chat_id=user.tg_id, message_id=user.last_message_id)

        sent_message = bot.send_message(user.tg_id, translate(text, user.language_chooce), reply_markup=keyboard, parse_mode='HTML')

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –º–æ–¥–µ–ª—å –∏–ª–∏ –≤ state
        user.last_message_id = sent_message.message_id
        user.save()




    def user_protein(self, bot, state, user, callback_data, callback_id, message, event):
        if callback_id:
            bot.answer_callback_query(callback_query_id=callback_id)
        self.val = {}  # –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ –≤—ã–∑–æ–≤–∞
        print(f'''
            user - {user}
            call_data - {callback_data}
            call_id - {callback_id}
            message - {message}''')

        otvet = callback_data.split(' ')[1]
        if otvet == '–î–∞':
            if user.purpose == "–ü–æ—Ö—É–¥–µ–Ω–∏–µ":
                user.protein = "–ò–∑–æ–ª—è—Ç —Å—ã–≤–æ—Ä–æ—Ç–æ—á–Ω–æ–≥–æ –ø—Ä–æ—Ç–µ–∏–Ω–∞"

            elif user.purpose == "–°—É—à–∫–∞":
                user.protein = "–ì–∏–¥—Ä–æ–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Å—ã–≤–æ—Ä–æ—Ç–æ—á–Ω—ã–π –ø—Ä–æ—Ç–µ–∏–Ω"

            elif user.purpose == "–ú–∞—Å—Å–∞–Ω–∞–±–æ—Ä":
                user.protein = "–ö–æ–Ω—Ü–µ—Ç—Ä–∞—Ç —Å—ã–≤–æ—Ä–æ—Ç–æ—á–Ω–æ–≥–æ –ø—Ä–æ—Ç–µ–∏–Ω–∞"

        elif otvet == '–ù–µ—Ç':
            user.protein = "–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ—Ç–µ–∏–Ω –≤ –º–µ–Ω—é"


        user.state = state.current_state
        user.save()
        

        # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        
        self.val['user_name'] = user.name if hasattr(user, 'name') else '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
        self.val['user_id'] = user.tg_id
        self.val['text'] = f"{otvet}\n{user.purpose}\n{user.protein}"   # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        text = self.format_message_text(state.text)

        buttons = Bot_Button.objects.filter(message_trigger=state).order_by('id')
        keyboard = InlineKeyboardMarkup()

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫
        button_list = [
            InlineKeyboardButton(text=translate(button.text, user.language_chooce), callback_data=f'{button.data} {button.text}')
            for button in buttons
        ]

        # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Å 3 –∫–Ω–æ–ø–∫–∞–º–∏
        if len(button_list) >= 3:
            keyboard.row(*button_list[:3])

        # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ —Å 2 –∫–Ω–æ–ø–∫–∞–º–∏
        if len(button_list) >= 5:
            keyboard.row(*button_list[3:5])

        # –ï—Å–ª–∏ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—å—à–µ 5, –¥–æ–±–∞–≤–∏–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
        for button in button_list[5:]:
            keyboard.add(button)

        if user.last_message_id:
            bot.delete_message(chat_id=user.tg_id, message_id=user.last_message_id)

        sent_message = bot.send_message(user.tg_id, translate(text, user.language_chooce), reply_markup=keyboard, parse_mode='HTML')

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –º–æ–¥–µ–ª—å –∏–ª–∏ –≤ state
        user.last_message_id = sent_message.message_id
        user.save()



    def user_traning_day(self, bot, state, user, callback_data, callback_id, message, event):
        if callback_id:
            bot.answer_callback_query(callback_query_id=callback_id)
        self.val = {}  # –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ –≤—ã–∑–æ–≤–∞
        print(f'''
            user - {user}
            call_data - {callback_data}
            call_id - {callback_id}
            message - {message}''')

        traninf_day_on_the_week = callback_data.split(' ')[1]
        user.training_frequency = int(traninf_day_on_the_week.replace('+', ' '))

        user.state = state.current_state
        user.save()

        #–°–æ–±—Ä–∞–µ–º –≤—Å–µ –≤–≤–µ–¥–µ–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ GPT
        # user_message = "–î–º–∏—Ç—Ä–∏–π –ú—É–∂—á–∏–Ω–∞ 18 –ª–µ—Ç 73 –∫–≥ –ú–∞—Å—Å–∞–Ω–∞–±–æ—Ä –ú—è—Å–æ, –æ–≤–æ—â–∏ –ê–ª–ª–µ—Ä–≥–∏–∏ –Ω–µ—Ç –¥–∞, –ö–æ–Ω—Ü–µ—Ç—Ä–∞—Ç —Å—ã–≤–æ—Ä–æ—Ç–æ—á–Ω–æ–≥–æ –ø—Ä–æ—Ç–µ–∏–Ω–∞ 3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é"
        # response = interact_with_assistant(user_message)

        # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.val['user_name'] = user.name if hasattr(user, 'name') else '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
        self.val['user_id'] = user.tg_id
        self.val['text'] = ''  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        text = self.format_message_text(state.text)

        buttons = Bot_Button.objects.filter(message_trigger=state)
        keyboard = InlineKeyboardMarkup()
        for button in buttons:
            keyboard.add(InlineKeyboardButton(text=translate(button.text, user.language_chooce), callback_data=button.data))


        if user.last_message_id:
            bot.delete_message(chat_id=user.tg_id, message_id=user.last_message_id)

        sent_message = bot.send_message(user.tg_id, translate(text, user.language_chooce), reply_markup=keyboard, parse_mode='HTML')

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –º–æ–¥–µ–ª—å –∏–ª–∏ –≤ state
        user.last_message_id = sent_message.message_id
        user.save()

        def clean_response(response):
            if not isinstance(response, str):
                return response
            
            # –£–¥–∞–ª—è–µ–º markdown-–∑–∞–≥–æ–ª–æ–≤–∫–∏ (# ...)
            response = re.sub(r'^#+\s*', '', response, flags=re.MULTILINE)
            
            # –£–¥–∞–ª—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ ChatGPT –≤–∏–¥–∞: „Äê4:0‚Ä†source„Äë
            response = re.sub(r'„Äê\d+:\d+‚Ä†[^„Äë]*„Äë', '', response)
            
            # –£–¥–∞–ª—è–µ–º –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã ‚Ä†, „Äê, „Äë
            special_chars_pattern = r'[‚Ä†„Äê„Äë]'
            response = re.sub(special_chars_pattern, '', response)
            
            # –ë–æ–ª—å—à–µ –ø—Ä–æ–±–µ–ª—ã –Ω–µ —Å–∂–∏–º–∞–µ–º –∏ –Ω–µ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º
            
            return response


        text_custom = Text_Castom.objects.get(condition="user_prompt_menu")
        user_message = f"{text_custom.text}. {user.first_name}, {user.gender}, {user.age} –ª–µ—Ç, {user.massa} –∫–≥, —Ä–æ—Å—Ç {user.height} —Å–º, —Ü–µ–ª—å: {user.purpose}, –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–∏—Ç–∞–Ω–∏—è: {user.products}, –Ω–∞–ª–∏—á–∏–µ –∞–ª–ª–µ—Ä–≥–∏–∏: {user.allergies}, —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø—Ä–æ—Ç–µ–∏–Ω–∞: {user.protein}, –∫–æ–ª–∏—á–µ—Å–≤–æ —Ç–µ—Ä–µ–Ω–µ—Ä–æ–≤–æ–∫: {user.training_frequency} —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é"
        response = interact_with_assistant(user_message)
        response_clean = clean_response(response)
        user.menu = response_clean
        
        keyboards = InlineKeyboardMarkup()
        keyboards.add(InlineKeyboardButton(text=translate('–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –º–µ–Ω—é –∑–∞–Ω–æ–≤–æ', user.language_chooce), callback_data='next'))
        keyboards.add(InlineKeyboardButton(text=translate('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', user.language_chooce), callback_data='start'))
        sent_message = bot.send_message(user.tg_id, translate(response_clean, user.language_chooce), parse_mode='Markdown', reply_markup=keyboards)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –º–æ–¥–µ–ª—å –∏–ª–∏ –≤ state
        user.last_message_id = sent_message.message_id
        user.save()

        try:
            obj = Text_Castom.objects.get(condition=user.purpose)
            text = obj.text
            bot.send_message(user.tg_id, translate(text, user.language_chooce), parse_mode='HTML')
        except Exception as e:
            print(f"user_traning_day, {e}")


        obj_kreatin = Text_Castom.objects.get(condition="–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å–ø–æ—Ä—Ç-–ø–∏—Ç—É")
        text_kreatin = obj_kreatin.text
        bot.send_message(user.tg_id, translate(text_kreatin, user.language_chooce), parse_mode='HTML')


        time.sleep(5)
        user_message_motivational_messages = f'–°–¥–µ–ª–∞–π –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–æ–∫–æ–ª–æ 40 —Å–ª–æ–≤) –¥–ª—è {user.first_name}, –∫–æ—Ç–æ—Ä—ã–π —Ç—Ä–µ–Ω–µ—Ä—É–µ—Ç—Å—è {user.training_frequency} —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é –∏ –∏–º–µ–µ—Ç —Ü–µ–ª—å –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö: {user.purpose}.'
        response_motivational_messages = interact_with_assistant(user_message_motivational_messages)
        response_motivational_messages_clean = clean_response(response_motivational_messages)
        Motivational_Messages.objects.create(user=user, text=translate(response_motivational_messages_clean, user.language_chooce))
